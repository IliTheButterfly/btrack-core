# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

  # Select a prebuilt Open CV release from https://github.com/IliTheButterfly/opencv-builds
  OPENCV_VERSION: 4.10.0
  OPENCV_RELEASE_VERSION: 2.0.0
  OPENCV_PLATFORM: Windows10
  OPENCV_ARCH: x64
  OPENCV_BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Set up dependencies directory
      run: |
        $depsPath = "C:\btrack-core-cache\deps"
        $currentPath = "$depsPath\current"
        if (-Not (Test-Path $depsPath)) {
          mkdir -p $depsPath
        }
        if (-Not (Test-Path $currentPath)) {
          mkdir -p $currentPath
        }

    - name: Download and extract OpenCV
      run: |
        $fileUrl = "https://github.com/IliTheButterfly/opencv-builds/releases/download/R${env:OPENCV_RELEASE_VERSION}/${env:OPENCV_PLATFORM}_${env:OPENCV_ARCH}_${env:OPENCV_BUILD_TYPE}.zip"
        $fileName = "C:\btrack-core-cache\deps\${env:OPENCV_PLATFORM}_${env:OPENCV_ARCH}_${env:OPENCV_BUILD_TYPE}_${env:OPENCV_VERSION}_${env:OPENCV_RELEASE_VERSION}.zip"
        $currentDir = "C:\btrack-core-cache\deps\current"
        $versionFile = "$currentDir\version.txt"
        $expectedVersion = "${env:OPENCV_RELEASE_VERSION}_${env:OPENCV_PLATFORM}_${env:OPENCV_ARCH}_${env:OPENCV_BUILD_TYPE}"

        # Download the file if it doesn't already exist
        if (-Not (Test-Path $fileName)) {
            Write-Host "Downloading $fileName..."
            Invoke-WebRequest -Uri $fileUrl -OutFile $fileName
        } else {
            Write-Host "$fileName already exists. Skipping download."
        }

        # Check if the current directory exists and if it contains the expected version
        if (Test-Path $currentDir) {
            if (Test-Path $versionFile) {
                $currentVersion = Get-Content $versionFile
                if ($currentVersion -ne $expectedVersion) {
                    Write-Host "Different version detected. Overwriting with correct version..."
                    Remove-Item -Recurse -Force $currentDir
                    Expand-Archive -Path $fileName -DestinationPath $currentDir
                    $expectedVersion | Out-File -FilePath $versionFile -Encoding ascii
                } else {
                    Write-Host "Current version is up to date."
                }
            } else {
                Write-Host "Version file not found. Extracting and creating version file..."
                Remove-Item -Recurse -Force $currentDir
                Expand-Archive -Path $fileName -DestinationPath $currentDir
                $expectedVersion | Out-File -FilePath $versionFile -Encoding ascii
            }
        } else {
            Write-Host "Current directory not found. Extracting and creating version file..."
            Expand-Archive -Path $fileName -DestinationPath $currentDir
            $expectedVersion | Out-File -FilePath $versionFile -Encoding ascii
        }


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}}/btrack-core -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOpenCV_DIR=C:/btrack-core-cache/deps/current/install/${{env.OPENCV_ARCH}}/vc17/staticlib -DBoost_INCLUDE_DIR=C:/btrack-core-cache/boost_1_85_0

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} 

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

